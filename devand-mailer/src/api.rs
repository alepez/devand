use jsonrpc_derive::rpc;

// server and client have different return type:
//     - server return jsonrpc_core::Result
//     - client return core::Result
// Conditional `use` is needed to return the right type
#[cfg(feature = "server")]
use jsonrpc_core::Result;

// Here we can write the Rpc once, both for client and server
#[cfg_attr(feature = "server", rpc(server))]
#[cfg_attr(feature = "client", rpc(client))]
pub trait Rpc {
    #[rpc(name = "send_email")]
    fn send_email(&self, recipient: String, subject: String, text: String) -> Result<()>;
}

// This is generated by rpc macro
#[cfg(feature = "client")]
pub type GenClient = gen_client::Client;
