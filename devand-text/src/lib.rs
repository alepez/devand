pub enum Text<'a> {
    EmptyString,
    Settings,
    Affinities,
    CodeNow,
    Schedule,
    Security,
    Messages,
    AffinitiesTableDescription,
    NoMatchingUsersFound,
    ExtendYourLanguageSelection,
    YourCurrentWeeklySchedule,
    SetYourAvailability,
    YouHaventScheduled,
    ChatWith(&'a str),
    UserWithUnverifiedEmail,
    NoChatsYet,
    CodeNowTableDescription,
    ContactBestMatchingUsers,
    NoOnlineUsers,
    NoMatchingOnlineUsers,
    Add,
    PageNotFound(&'a str),
    UnknownPageNotFound,
    ExtendYourAvailability,
    NoAvailableUsers,
    PasswordChanged,
    PasswordChangeError,
    Password,
    PasswordUnsecure,
    PasswordMismatch,
    NewPassword,
    NewPasswordOk,
    RepeatNewPassword,
    OldPassword,
    OldPasswordWrong,
    OldPasswordOk,
    VacationModeEnabled,
    AddressUnverified,
    CheckEmailForLink,
    Verify,
    UsernameCannotBeChanged,
    MaxNCharacters(usize),
    VacationMode,
    Languages,
    SpokenLanguages,
    SelectOneLanguage,
    SelectOneSpokenLanguage,
    VisibleName,
    Bio,
    LowAffinity,
    MediumAffinity,
    HighAffinity,
    UserSpeaks(&'a str),
    Loading,
    EmailVerifySubject,
    EmailVerifyBodyMarkdown(&'a str),
}

impl<'a> ToString for Text<'a> {
    fn to_string(&self) -> String {
        match self {
            Text::EmptyString => "".into(),
            Text::Settings => "Settings".into(),
            Text::Affinities => "Affinities".into(),
            Text::CodeNow => "Code Now".into(),
            Text::Schedule => "Schedule".into(),
            Text::Security => "Security".into(),
            Text::Messages => "Messages".into(),
            Text::AffinitiesTableDescription => "In the table below, you can see a list of developers who love the same languages as you. Just click the chat icon to start chatting and organize your next pair-programming session.".into(),
            Text::NoMatchingUsersFound => "Sorry, no matching users found. You can try to ".into(),
            Text::ExtendYourLanguageSelection => "extend your language selection.".into(),
            Text::YourCurrentWeeklySchedule => "Your current weekly schedule. Check your available hours. All hours are in UTC".into(),
            Text::SetYourAvailability => "Set your availability".into(),
            Text::YouHaventScheduled => "You haven't scheduled anything yet".into(),
            Text::ChatWith(name) => format!("Chat with {}", name),
            Text::UserWithUnverifiedEmail => "This user may not receive email notification of this message (email not verified yet)".into(),
            Text::NoChatsYet => "You don't have any chat yet".into(),
            Text::CodeNowTableDescription => "In the table below, you can see a list of online developers, sorted by analogy. Just click the chat icon to start chatting and organize your next pair-programming session.".into(),
            Text::ContactBestMatchingUsers => "contact any of best matching users.".into(),
            Text::NoOnlineUsers => "Sorry, no matching online users found. You can try to ".into(),
            Text::NoMatchingOnlineUsers => "Sorry, there are no online users now. You can try later or ".into(),
            Text::Add => "Add".into(),
            Text::PageNotFound(page) => format!("Page {} not found", page),
            Text::UnknownPageNotFound => "Page not found".into(),
            Text::ExtendYourAvailability => "extend your availability.".into(),
            Text::NoAvailableUsers => "Sorry, there are no available users. You can try to ".into(),
            Text::PasswordChanged => "Password changed successfully.".into(),
            Text::PasswordChangeError => "An error occurred while changing password. Please, retry.".into(),
            Text::Password => "Password".into(),
            Text::PasswordUnsecure => "Password is too unsecure".into(),
            Text::PasswordMismatch => "Password mismatch".into(),
            Text::NewPassword => "New password".into(),
            Text::NewPasswordOk => "New password ok".into(),
            Text::RepeatNewPassword => "Repeat new password".into(),
            Text::OldPassword => "Old password".into(),
            Text::OldPasswordWrong => "Old password is wrong".into(),
            Text::OldPasswordOk => "Old password ok".into(),
            Text::VacationModeEnabled => "You are currently in vacation mode".into(),
            Text::AddressUnverified => "This address is not verified.".into(),
            Text::CheckEmailForLink => "Check your email for a link to verify your email address. If it doesnâ€™t appear within a few minutes, check your spam folder.".into(),
            Text::Verify => "Verify".into(),
            Text::UsernameCannotBeChanged => "Username cannot be changed".into(),
            Text::MaxNCharacters(n) => format!("(max {} characters)", n),
            Text::VacationMode => " Vacation mode".into(),
            Text::Languages => "Languages".into(),
            Text::SpokenLanguages => "Spoken Languages".into(),
            Text::SelectOneLanguage => "Please, select at least one language with Low or High priority".into(),
            Text::SelectOneSpokenLanguage => "Please, select at least one spoken language".into(),
            Text::VisibleName => "Visible name".into(),
            Text::Bio => "Bio".into(),
            Text::LowAffinity => "Low affinity".into(),
            Text::MediumAffinity => "Medium affinity".into(),
            Text::HighAffinity => "High affinity".into(),
            Text::UserSpeaks(user) => format!("{} speaks", user),
            Text::Loading => "Loading...".into(),
            Text::EmailVerifySubject => "Verify Email Address for DevAndDev".into(),
            Text::EmailVerifyBodyMarkdown(url) => format!("Thanks for registering for an account on *DevAndDev*!\n\n\
                                                           Before we get started, we just need to confirm that this is you.\n\n\
                                                           Click below to verify your email address:\n\n\
                                                           {}", url),
        }
    }
}

impl Default for Text<'_> {
    fn default() -> Self {
        Text::EmptyString
    }
}
